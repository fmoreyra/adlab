#!/usr/bin/env bash

set -o errexit
set -o pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker and try again."
        exit 1
    fi
    print_success "Docker is running"
}

# Check if containers are built
check_containers() {
    if ! docker compose ps | grep -q "web"; then
        print_warning "Containers are not running. Building and starting them..."
        docker compose up --build -d
    else
        print_success "Containers are running"
    fi
}

# Get Python path from container
get_python_path() {
    print_status "Getting Python path from Docker container..."
    
    # Get the Python executable path
    PYTHON_PATH=$(docker compose exec -T web which python3)
    print_success "Python executable: $PYTHON_PATH"
    
    # Get the site-packages path
    SITE_PACKAGES=$(docker compose exec -T web python3 -c "import site; print(site.getsitepackages()[0])")
    print_success "Site packages: $SITE_PACKAGES"
    
    # Get Django version
    DJANGO_VERSION=$(docker compose exec -T web python3 -c "import django; print(django.get_version())")
    print_success "Django version: $DJANGO_VERSION"
    
    # Create a Python path file for IDE configuration
    cat > .python-path << EOF
# Docker Container Python Environment
# Generated by setup-docker-ide.sh

PYTHON_EXECUTABLE=$PYTHON_PATH
SITE_PACKAGES=$SITE_PACKAGES
DJANGO_VERSION=$DJANGO_VERSION
CONTAINER_NAME=adlab-web-1
EOF
    
    print_success "Python environment info saved to .python-path"
}

# Create VS Code workspace settings
create_vscode_workspace() {
    print_status "Creating VS Code workspace configuration..."
    
    cat > laboratory-system.code-workspace << EOF
{
    "folders": [
        {
            "path": "."
        }
    ],
    "settings": {
        "python.defaultInterpreterPath": "$PYTHON_PATH",
        "python.analysis.extraPaths": [
            "./src",
            "$SITE_PACKAGES"
        ],
        "python.analysis.autoImportCompletions": true,
        "python.analysis.typeCheckingMode": "basic",
        "python.linting.enabled": true,
        "python.linting.pylintEnabled": false,
        "python.linting.flake8Enabled": true,
        "python.linting.mypyEnabled": false,
        "python.analysis.diagnosticMode": "workspace",
        "python.analysis.stubPath": "./src",
        "python.analysis.include": [
            "./src/**"
        ],
        "python.analysis.exclude": [
            "**/node_modules",
            "**/__pycache__",
            "**/migrations"
        ],
        "files.exclude": {
            "**/__pycache__": true,
            "**/*.pyc": true,
            "**/migrations": false
        },
        "python.terminal.activateEnvironment": true,
        "python.terminal.activateEnvInCurrentTerminal": true,
        "python.analysis.autoSearchPaths": true,
        "python.analysis.diagnosticSeverityOverrides": {
            "reportMissingImports": "warning",
            "reportMissingTypeStubs": "none"
        },
        "terminal.integrated.defaultProfile.osx": "docker-shell",
        "terminal.integrated.profiles.osx": {
            "docker-shell": {
                "path": "docker",
                "args": ["compose", "exec", "web", "bash"]
            }
        },
        "terminal.integrated.defaultProfile.linux": "docker-shell",
        "terminal.integrated.profiles.linux": {
            "docker-shell": {
                "path": "docker",
                "args": ["compose", "exec", "web", "bash"]
            }
        }
    },
    "extensions": {
        "recommendations": [
            "ms-python.python",
            "ms-python.pylint",
            "ms-python.flake8",
            "ms-python.black-formatter",
            "ms-python.isort",
            "ms-vscode-remote.remote-containers",
            "bradlc.vscode-tailwindcss"
        ]
    }
}
EOF
    
    print_success "VS Code workspace created: laboratory-system.code-workspace"
}

# Create PyCharm configuration
create_pycharm_config() {
    print_status "Creating PyCharm configuration..."
    
    mkdir -p .idea/runConfigurations
    
    cat > .idea/misc.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager" version="2" project-jdk-name="Docker Python" project-jdk-type="Python SDK" />
</component>
</project>
EOF

    cat > .idea/runConfigurations/Django_Server.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<configuration default="false" name="Django Server" type="PythonConfigurationType" factoryName="Python">
  <module name="laboratory-system" />
  <option name="INTERPRETER_OPTIONS" value="" />
  <option name="PARENT_ENVS" value="true" />
  <envs>
    <env name="PYTHONUNBUFFERED" value="1" />
    <env name="DJANGO_SETTINGS_MODULE" value="config.settings" />
  </envs>
  <option name="SDK_HOME" value="$PYTHON_PATH" />
  <option name="WORKING_DIRECTORY" value="\$PROJECT_DIR\$/src" />
  <option name="IS_MODULE_SDK" value="false" />
  <option name="ADD_CONTENT_ROOTS" value="true" />
  <option name="ADD_SOURCE_ROOTS" value="true" />
  <option name="SCRIPT_NAME" value="manage.py" />
  <option name="PARAMETERS" value="runserver 0.0.0.0:8000" />
  <option name="SHOW_COMMAND_LINE" value="false" />
  <option name="EMULATE_TERMINAL" value="false" />
  <option name="MODULE_MODE" value="false" />
  <option name="REDIRECT_INPUT" value="false" />
  <option name="INPUT_FILE" value="" />
  <method v="2" />
</configuration>
EOF
    
    print_success "PyCharm configuration created"
}

# Test Django imports
test_django_imports() {
    print_status "Testing Django imports in container..."
    
    docker compose exec -T web python3 -c "
import django
import django.conf
import django.contrib
import django.contrib.auth
import django.contrib.admin
import django.core.mail
import django.shortcuts
import django.urls
import django.utils
import django.views.generic
print('‚úÖ All Django imports successful!')
print(f'Django version: {django.get_version()}')
print(f'Django settings: {django.conf.settings.SETTINGS_MODULE}')
"
    
    print_success "Django imports test passed"
}

# Main function
main() {
    echo "üê≥ Setting up IDE to use Docker container packages..."
    echo "=================================================="
    
    check_docker
    check_containers
    get_python_path
    create_vscode_workspace
    create_pycharm_config
    test_django_imports
    
    echo ""
    echo "üéâ Setup complete!"
    echo ""
    echo "üìã Next steps:"
    echo "1. Open VS Code: code laboratory-system.code-workspace"
    echo "2. Or use Remote Containers: Cmd+Shift+P ‚Üí 'Remote-Containers: Reopen in Container'"
    echo "3. Select Python interpreter: Cmd+Shift+P ‚Üí 'Python: Select Interpreter'"
    echo "4. Choose the Docker container Python: $PYTHON_PATH"
    echo ""
    echo "üîß Available commands:"
    echo "  - Run Django: docker compose exec web python manage.py runserver"
    echo "  - Run tests: docker compose exec web python manage.py test"
    echo "  - Shell access: docker compose exec web bash"
    echo ""
    echo "üìÅ Configuration files created:"
    echo "  - .python-path (Python environment info)"
    echo "  - laboratory-system.code-workspace (VS Code workspace)"
    echo "  - .idea/ (PyCharm configuration)"
}

# Run main function
main "$@"
