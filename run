#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY="${TTY:-}"
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

_dc() {
  # shellcheck disable=SC2086
  docker compose "${DC}" ${TTY} "${@}"
}

_dc_run() {
  DC="run" _dc --no-deps --rm "${@}"
}

# -----------------------------------------------------------------------------

cmd() {
  # Run any command you want in the web container
  _dc web "${@}"
}

manage() {
  # Run any manage.py commands

  # We need to collectstatic before we run our tests.
  if [ "${1-''}" == "test" ]; then
    cmd python3 manage.py collectstatic --no-input
  fi

  cmd python3 manage.py "${@}"
}

test() {
  # Run the full local test suite
  echo "üß™ Running full Django test suite..."
  echo "üìã Test modules: accounts, protocols, pages, up"
  echo ""

  # Run all tests (without parallel flag to ensure sequential execution)
  manage test accounts.tests protocols.tests protocols.tests_reports protocols.tests_workorder pages.tests up.tests

  local exit_code=$?

  if [ $exit_code -eq 0 ]; then
    echo ""
    echo "‚úÖ All tests passed successfully!"
  else
    echo ""
    echo "‚ùå Some tests failed. Exit code: $exit_code"
  fi

  return $exit_code
}

test:cleanup() {
  # Clean up test database connections and drop test database
  echo "üßπ Cleaning up test database..."

  # Terminate any lingering connections to test database
  docker compose exec postgres psql -U adlab -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'test_adlab' AND pid <> pg_backend_pid();" 2>/dev/null || true

  # Drop the test database
  docker compose exec postgres psql -U adlab -d postgres -c "DROP DATABASE IF EXISTS test_adlab;" 2>/dev/null || true

  echo "‚úÖ Test database cleanup completed"
}

lint:dockerfile() {
  # Lint Dockerfile
  docker container run --rm -i \
    -v "${PWD}/.hadolint.yaml:/.config/hadolint.yaml" \
    hadolint/hadolint hadolint "${@}" - <Dockerfile
}

lint:shell() {
  # Lint shell scripts
  local cmd=(shellcheck)

  if ! command -v shellcheck >/dev/null 2>&1; then
    local cmd=(docker container run --rm -i -v "${PWD}:/mnt" koalaman/shellcheck:stable)
  fi

  find . -type f \
    ! -path "./.git/*" \
    ! -path "./.ruff_cache/*" \
    ! -path "./.pytest_cache/*" \
    ! -path "./assets/*" \
    ! -path "./public/*" \
    ! -path "./public_collected/*" \
    ! -name "*.md" \
    -exec grep --quiet '^#!.*sh' {} \; -exec "${cmd[@]}" {} +
}

lint() {
  # Lint Python code
  cmd ruff check "${@}"
}

format:shell() {
  # Format shell scripts
  local cmd=(shfmt)

  if ! command -v shfmt >/dev/null 2>&1; then
    local cmd=(docker container run --rm -i -v "${PWD}:/mnt" -u "$(id -u):$(id -g)" -w /mnt mvdan/shfmt:v3)
  fi

  local maybe_write=("--write")

  for arg in "${@}"; do
    if [ "${arg}" == "-d" ] || [ "${arg}" == "--diff" ]; then
      unset "maybe_write[0]"
    fi
  done

  "${cmd[@]}" "${maybe_write[@]}" "${@}" .
}

format() {
  # Format Python code
  cmd ruff check --fix
  cmd ruff format "${@}"
}

quality() {
  # Perform all code quality commands together
  lint:dockerfile
  lint:shell
  lint

  format:shell
  format
}

secret() {
  # Generate a random secret that can be used for your SECRET_KEY and more
  cmd python3 -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
}

shell() {
  # Start a shell session in the web container
  cmd bash "${@}"
}

psql() {
  # Connect to PostgreSQL
  # shellcheck disable=SC1091
  . .env
  _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

redis-cli() {
  # Connect to Redis
  _dc redis redis-cli "${@}"
}

db:dump() {
  # Generate a database dump
  local timestamp
  timestamp=$(date +"%Y%m%d_%H%M%S")
  local backup_dir="./backups"
  local dump_file="${backup_dir}/adlab_dump_${timestamp}.sql"

  # Create backup directory if it doesn't exist
  mkdir -p "${backup_dir}"

  echo "üóÑÔ∏è  Generating database dump..."
  echo "üìÅ Backup directory: ${backup_dir}"
  echo "üìÑ Dump file: $(basename "${dump_file}")"
  echo ""

  # Load environment variables
  # shellcheck disable=SC1091
  . .env

  # Generate the dump using pg_dump
  _dc postgres pg_dump \
    -U "${POSTGRES_USER}" \
    -h localhost \
    -p 5432 \
    "${POSTGRES_DB}" \
    --no-password \
    --verbose \
    --clean \
    --if-exists \
    --create \
    --format=plain \
    --file="/tmp/dump_${timestamp}.sql"

  # Copy the dump file from the container to the host
  docker compose cp "postgres:/tmp/dump_${timestamp}.sql" "${dump_file}"

  # Clean up the temporary file in the container
  _dc postgres rm -f "/tmp/dump_${timestamp}.sql"

  if [ -f "${dump_file}" ]; then
    local file_size
    file_size=$(du -h "${dump_file}" | cut -f1)
    echo ""
    echo "‚úÖ Database dump created successfully!"
    echo "üìä File size: ${file_size}"
    echo "üìç Location: ${dump_file}"
  else
    echo ""
    echo "‚ùå Failed to create database dump"
    return 1
  fi
}

db:restore() {
  # Restore a database from a dump file
  local dump_file="${1:-}"

  if [ -z "${dump_file}" ]; then
    echo "‚ùå Please provide a dump file path"
    echo "Usage: $0 db:restore <path_to_dump_file>"
    return 1
  fi

  if [ ! -f "${dump_file}" ]; then
    echo "‚ùå Dump file not found: ${dump_file}"
    return 1
  fi

  echo "üóÑÔ∏è  Restoring database from dump..."
  echo "üìÑ Dump file: ${dump_file}"
  echo ""

  # Load environment variables
  # shellcheck disable=SC1091
  . .env

  # Copy the dump file to the container
  local temp_dump
  temp_dump="/tmp/restore_$(basename "${dump_file}")"
  docker compose cp "${dump_file}" "postgres:${temp_dump}"

  # Restore the database
  _dc postgres psql \
    -U "${POSTGRES_USER}" \
    -h localhost \
    -p 5432 \
    -d postgres \
    --no-password \
    -f "${temp_dump}"

  # Clean up the temporary file in the container
  _dc postgres rm -f "${temp_dump}"

  echo ""
  echo "‚úÖ Database restored successfully!"
}

db:list-backups() {
  # List available database backups
  local backup_dir="./backups"

  if [ ! -d "${backup_dir}" ]; then
    echo "üìÅ No backup directory found at ${backup_dir}"
    return 0
  fi

  local backup_count
  backup_count=$(find "${backup_dir}" -name "adlab_dump_*.sql" | wc -l)

  if [ "${backup_count}" -eq 0 ]; then
    echo "üìÅ No database backups found in ${backup_dir}"
    return 0
  fi

  echo "üóÑÔ∏è  Available database backups:"
  echo "üìÅ Directory: ${backup_dir}"
  echo ""

  # List backups with file size and date
  find "${backup_dir}" -name "adlab_dump_*.sql" -type f -exec ls -lh {} \; |
    awk '{print "üìÑ " $9 " (" $5 ", " $6 " " $7 " " $8 ")"}' |
    sort -r
}

deps:install() {
  # Install back-end and / or front-end dependencies
  local no_build="${1:-}"

  [ -z "${no_build}" ] && docker compose down && docker compose build

  _dc_run js yarn install
  _dc_run web bash -c "cd .. && bin/uv-install"
}

uv() {
  # Run any uv commands
  cmd uv "${@}"
}

uv:outdated() {
  # List any installed packages that are outdated
  _dc_run web uv tree --outdated --depth 1 "${@}"
}

yarn() {
  # Run any yarn commands
  _dc js yarn "${@}"
}

yarn:outdated() {
  # List any installed packages that are outdated
  _dc_run js yarn outdated
}

yarn:build:js() {
  # Build JS assets, this is meant to be run from within the assets container
  mkdir -p ../public/js
  node esbuild.config.mjs
}

yarn:build:css() {
  # Build CSS assets, this is meant to be run from within the assets container
  local args=()

  if [ "${NODE_ENV:-}" == "production" ]; then
    args=(--minify)
  else
    args=(--watch)
  fi

  mkdir -p ../public/css
  DEBUG=0 tailwindcss -i css/app.css -o ../public/css/app.css "${args[@]}"
}

clean() {
  # Remove cache and other machine generates files
  rm -rf public/*.* public/admin public/js public/css public/images public/fonts \
    public_collected/*.* public_collected/admin public_collected/js \
    public_collected/css public_collected/images public_collected/fonts \
    .ruff_cache/ .pytest_cache/ .coverage celerybeat-schedule

  touch public/.keep public_collected/.keep
}

ci:install-deps() {
  # Install Continuous Integration (CI) dependencies
  sudo apt-get install -y curl
  sudo curl \
    -L https://raw.githubusercontent.com/nickjj/wait-until/v0.2.0/wait-until \
    -o /usr/local/bin/wait-until && sudo chmod +x /usr/local/bin/wait-until
}

ci:test() {
  # Execute Continuous Integration (CI) pipeline
  lint:dockerfile "${@}"
  lint:shell
  format:shell --diff

  # Create a simple wait-until function if not available
  if ! command -v wait-until >/dev/null 2>&1; then
    echo "Creating wait-until function..."
    # shellcheck disable=SC2178
    wait-until() {
      # shellcheck disable=SC2128
      local cmd="$*"
      local max_attempts=30
      local attempt=1

      while [ $attempt -le $max_attempts ]; do
        # shellcheck disable=SC2128
        if eval "$cmd" >/dev/null 2>&1; then
          return 0
        fi
        echo "Attempt $attempt/$max_attempts: waiting for command to succeed..."
        sleep 2
        attempt=$((attempt + 1))
      done

      # shellcheck disable=SC2128
      echo "Command failed after $max_attempts attempts: $cmd"
      return 1
    }
  fi

  # Copy .env.example to .env if .env doesn't exist
  if [ ! -f .env ]; then
    cp .env.example .env
  fi

  docker compose build
  docker compose up -d

  # shellcheck disable=SC1091
  . .env
  wait-until "docker compose exec -T \
    -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
    psql -U ${POSTGRES_USER} ${POSTGRES_DB} -c 'SELECT 1'"

  docker compose logs

  lint "${@}"
  format --check --diff
  manage migrate
  manage test
}

help() {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
