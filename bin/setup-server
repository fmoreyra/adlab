#!/usr/bin/env bash

# Initial Server Setup Script for Laboratory System
# This script configures a fresh Ubuntu server for production deployment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="Laboratory System"
APP_USER="labuser"
APP_DIR="/opt/laboratory-system"
REPO_URL=""
DOMAIN_NAME=""

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_step() {
    echo -e "${PURPLE}🔧 $1${NC}"
}

# Show usage
show_usage() {
    echo -e "${CYAN}Usage: $0 [OPTIONS]${NC}"
    echo
    echo -e "${CYAN}Options:${NC}"
    echo -e "  -h, --help              Show this help message"
    echo -e "  -r, --repo URL          Git repository URL (required)"
    echo -e "  -d, --domain DOMAIN     Domain name for the application"
    echo -e "  -u, --user USER         Application user (default: labuser)"
    echo -e "  -p, --path PATH         Application directory (default: /opt/laboratory-system)"
    echo -e "  -f, --force             Skip confirmation prompts"
    echo
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  $0 --repo https://github.com/user/laboratory-system.git"
    echo -e "  $0 --repo git@github.com:user/laboratory-system.git --domain lab.example.com"
    echo -e "  $0 --repo https://github.com/user/laboratory-system.git --user myuser --path /opt/myapp"
    echo
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root"
        log_info "Please run as a regular user with sudo privileges"
        exit 1
    fi
    
    # Check if user has sudo privileges
    if ! sudo -n true 2>/dev/null; then
        log_error "This user does not have sudo privileges"
        log_info "Please add user to sudo group: sudo usermod -aG sudo $USER"
        exit 1
    fi
    
    log_success "Running as user with sudo privileges"
}

# Update system packages
update_system() {
    log_step "Updating system packages..."
    
    sudo apt update
    sudo apt upgrade -y
    
    # Install essential packages
    sudo apt install -y \
        curl \
        wget \
        git \
        unzip \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        htop \
        nano \
        vim \
        ufw \
        fail2ban \
        logrotate
    
    log_success "System packages updated and installed"
}

# Install Docker
install_docker() {
    log_step "Installing Docker and Docker Compose..."
    
    # Remove old Docker versions
    sudo apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    # Add Docker's official GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Add Docker repository
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Update package index
    sudo apt update
    
    # Install Docker
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Add current user to docker group
    sudo usermod -aG docker $USER
    
    # Enable and start Docker service
    sudo systemctl enable docker
    sudo systemctl start docker
    
    # Verify Docker installation
    if docker --version >/dev/null 2>&1; then
        log_success "Docker installed successfully"
    else
        log_error "Docker installation failed"
        exit 1
    fi
    
    # Verify Docker Compose
    if docker compose version >/dev/null 2>&1; then
        log_success "Docker Compose installed successfully"
    else
        log_error "Docker Compose installation failed"
        exit 1
    fi
}

# Configure firewall
configure_firewall() {
    log_step "Configuring firewall..."
    
    # Reset UFW to defaults
    sudo ufw --force reset
    
    # Set default policies
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    
    # Allow SSH
    sudo ufw allow ssh
    
    # Allow HTTP and HTTPS
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    
    # Allow application port (only from local network)
    sudo ufw allow from 192.168.0.0/16 to any port 8000
    
    # Enable firewall
    sudo ufw --force enable
    
    log_success "Firewall configured"
}

# Configure fail2ban
configure_fail2ban() {
    log_step "Configuring fail2ban..."
    
    # Create jail.local configuration
    sudo tee /etc/fail2ban/jail.local > /dev/null <<EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
EOF
    
    # Restart fail2ban
    sudo systemctl enable fail2ban
    sudo systemctl restart fail2ban
    
    log_success "Fail2ban configured"
}

# Create application user
create_app_user() {
    if [[ "$APP_USER" != "$USER" ]]; then
        log_step "Creating application user: $APP_USER"
        
        # Create user if it doesn't exist
        if ! id "$APP_USER" &>/dev/null; then
            sudo useradd -m -s /bin/bash "$APP_USER"
            sudo usermod -aG sudo "$APP_USER"
            sudo usermod -aG docker "$APP_USER"
            
            log_success "User $APP_USER created"
        else
            log_info "User $APP_USER already exists"
        fi
        
        # Add current user to docker group if not already
        sudo usermod -aG docker "$APP_USER"
    else
        log_info "Using current user: $USER"
        sudo usermod -aG docker "$USER"
    fi
}

# Setup application directory
setup_app_directory() {
    log_step "Setting up application directory..."
    
    # Create application directory
    sudo mkdir -p "$APP_DIR"
    sudo chown "$APP_USER:$APP_USER" "$APP_DIR"
    
    # Create backup directory
    sudo mkdir -p /tmp/lab-backups
    sudo chown "$APP_USER:$APP_USER" /tmp/lab-backups
    
    log_success "Application directory created: $APP_DIR"
}

# Clone repository
clone_repository() {
    log_step "Cloning repository..."
    
    if [[ -z "$REPO_URL" ]]; then
        log_error "Repository URL is required"
        log_info "Use --repo option to specify the repository URL"
        exit 1
    fi
    
    # Clone repository
    sudo -u "$APP_USER" git clone "$REPO_URL" "$APP_DIR"
    
    # Set proper ownership
    sudo chown -R "$APP_USER:$APP_USER" "$APP_DIR"
    
    log_success "Repository cloned to $APP_DIR"
}

# Setup environment file
setup_environment() {
    log_step "Setting up environment configuration..."
    
    local env_file="$APP_DIR/.env"
    
    # Copy environment template
    sudo -u "$APP_USER" cp "$APP_DIR/.env.example" "$env_file" 2>/dev/null || {
        log_warning ".env.example not found, creating basic .env file"
        sudo -u "$APP_USER" tee "$env_file" > /dev/null <<EOF
# Django Settings
SECRET_KEY=your-super-secret-key-here-change-this-in-production
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,192.168.0.130

# Database
POSTGRES_USER=lab_user
POSTGRES_PASSWORD=secure-database-password-change-this
POSTGRES_DB=laboratory_db

# Email (Configure SMTP for production)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=smtp.unl.edu.ar
EMAIL_PORT=587
EMAIL_HOST_USER=laboratorio@fcv.unl.edu.ar
EMAIL_HOST_PASSWORD=your-email-password
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL=laboratorio@fcv.unl.edu.ar

# Security (Production)
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_SSL_REDIRECT=False

# Redis
REDIS_URL=redis://redis:6379/0

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
EOF
    }
    
    # Update ALLOWED_HOSTS if domain is provided
    if [[ -n "$DOMAIN_NAME" ]]; then
        sudo -u "$APP_USER" sed -i "s/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=localhost,127.0.0.1,192.168.0.130,$DOMAIN_NAME/" "$env_file"
        log_info "Added domain $DOMAIN_NAME to ALLOWED_HOSTS"
    fi
    
    log_success "Environment file configured"
}

# Setup systemd service
setup_systemd_service() {
    log_step "Setting up systemd service..."
    
    # Create systemd service file
    sudo tee /etc/systemd/system/laboratory-system.service > /dev/null <<EOF
[Unit]
Description=Laboratory Management System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$APP_DIR
User=$APP_USER
Group=$APP_USER
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
ExecReload=/usr/bin/docker compose restart
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF
    
    # Reload systemd and enable service
    sudo systemctl daemon-reload
    sudo systemctl enable laboratory-system.service
    
    log_success "Systemd service configured"
}

# Setup log rotation
setup_log_rotation() {
    log_step "Setting up log rotation..."
    
    # Create logrotate configuration
    sudo tee /etc/logrotate.d/laboratory-system > /dev/null <<EOF
$APP_DIR/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $APP_USER $APP_USER
    postrotate
        /usr/bin/docker compose -f $APP_DIR/compose.yaml restart web worker beat > /dev/null 2>&1 || true
    endscript
}
EOF
    
    log_success "Log rotation configured"
}

# Setup monitoring script
setup_monitoring() {
    log_step "Setting up monitoring script..."
    
    # Create monitoring script
    sudo -u "$APP_USER" tee "$APP_DIR/bin/monitor" > /dev/null <<'EOF'
#!/usr/bin/env bash

# Simple monitoring script for Laboratory System

set -euo pipefail

APP_DIR="/opt/laboratory-system"
LOG_FILE="$APP_DIR/logs/monitor.log"

# Create logs directory
mkdir -p "$(dirname "$LOG_FILE")"

# Function to log with timestamp
log_with_timestamp() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Check Docker service
if ! systemctl is-active --quiet docker; then
    log_with_timestamp "ERROR: Docker service is not running"
    systemctl start docker
    log_with_timestamp "INFO: Started Docker service"
fi

# Check application containers
cd "$APP_DIR"
if ! docker compose ps | grep -q "Up"; then
    log_with_timestamp "WARNING: Some containers are not running"
    docker compose ps
fi

# Check disk space
DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [[ $DISK_USAGE -gt 80 ]]; then
    log_with_timestamp "WARNING: Disk usage is ${DISK_USAGE}%"
fi

# Check memory usage
MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [[ $MEMORY_USAGE -gt 80 ]]; then
    log_with_timestamp "WARNING: Memory usage is ${MEMORY_USAGE}%"
fi

log_with_timestamp "INFO: Health check completed"
EOF
    
    # Make script executable
    chmod +x "$APP_DIR/bin/monitor"
    
    # Create cron job for monitoring
    sudo -u "$APP_USER" crontab -l 2>/dev/null | grep -v "monitor" | {
        cat
        echo "*/5 * * * * $APP_DIR/bin/monitor"
    } | sudo -u "$APP_USER" crontab -
    
    log_success "Monitoring script configured"
}

# Setup backup script
setup_backup() {
    log_step "Setting up backup script..."
    
    # Create backup script
    sudo -u "$APP_USER" tee "$APP_DIR/bin/backup" > /dev/null <<'EOF'
#!/usr/bin/env bash

# Backup script for Laboratory System

set -euo pipefail

APP_DIR="/opt/laboratory-system"
BACKUP_DIR="/tmp/lab-backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Load environment variables
cd "$APP_DIR"
source .env

# Create database backup
echo "Creating database backup..."
docker compose exec -T postgres pg_dump -U "$POSTGRES_USER" "$POSTGRES_DB" | gzip > "$BACKUP_DIR/db_backup_$TIMESTAMP.sql.gz"

# Create application backup
echo "Creating application backup..."
tar -czf "$BACKUP_DIR/app_backup_$TIMESTAMP.tar.gz" \
    --exclude='.git' \
    --exclude='node_modules' \
    --exclude='__pycache__' \
    --exclude='*.pyc' \
    --exclude='.env' \
    -C "$APP_DIR" .

# Clean old backups (keep last 7 days)
find "$BACKUP_DIR" -name "*.gz" -type f -mtime +7 -delete

echo "Backup completed: $TIMESTAMP"
EOF
    
    # Make script executable
    chmod +x "$APP_DIR/bin/backup"
    
    # Create cron job for daily backups
    sudo -u "$APP_USER" crontab -l 2>/dev/null | grep -v "backup" | {
        cat
        echo "0 2 * * * $APP_DIR/bin/backup"
    } | sudo -u "$APP_USER" crontab -
    
    log_success "Backup script configured"
}

# Initial deployment
initial_deployment() {
    log_step "Running initial deployment..."
    
    cd "$APP_DIR"
    
    # Build Docker images
    sudo -u "$APP_USER" docker compose build
    
    # Start services
    sudo -u "$APP_USER" docker compose up -d
    
    # Wait for services to be ready
    sleep 10
    
    # Run migrations
    sudo -u "$APP_USER" ./run manage migrate
    
    # Collect static files
    sudo -u "$APP_USER" ./run manage collectstatic --no-input
    
    log_success "Initial deployment completed"
}

# Display setup summary
show_summary() {
    local setup_time=$(date)
    
    echo
    echo -e "${GREEN}🎉 Server Setup Complete!${NC}"
    echo -e "${GREEN}========================${NC}"
    echo -e "Project: $PROJECT_NAME"
    echo -e "User: $APP_USER"
    echo -e "Directory: $APP_DIR"
    echo -e "Repository: $REPO_URL"
    if [[ -n "$DOMAIN_NAME" ]]; then
        echo -e "Domain: $DOMAIN_NAME"
    fi
    echo -e "Time: $setup_time"
    echo
    echo -e "${CYAN}Next Steps:${NC}"
    echo -e "1. Configure environment variables: ${YELLOW}nano $APP_DIR/.env${NC}"
    echo -e "2. Create superuser: ${YELLOW}sudo -u $APP_USER $APP_DIR/run manage createsuperuser${NC}"
    echo -e "3. Test application: ${YELLOW}curl http://localhost:8000/up${NC}"
    echo -e "4. Check logs: ${YELLOW}sudo -u $APP_USER docker compose logs -f${NC}"
    echo
    echo -e "${CYAN}Useful Commands:${NC}"
    echo -e "• Deploy updates: ${YELLOW}sudo -u $APP_USER $APP_DIR/bin/deploy${NC}"
    echo -e "• Check status: ${YELLOW}sudo -u $APP_USER $APP_DIR/bin/pre-deploy-check${NC}"
    echo -e "• Monitor system: ${YELLOW}$APP_DIR/bin/monitor${NC}"
    echo -e "• Manual backup: ${YELLOW}$APP_DIR/bin/backup${NC}"
    echo
    echo -e "${CYAN}Service Management:${NC}"
    echo -e "• Start: ${YELLOW}sudo systemctl start laboratory-system${NC}"
    echo -e "• Stop: ${YELLOW}sudo systemctl stop laboratory-system${NC}"
    echo -e "• Status: ${YELLOW}sudo systemctl status laboratory-system${NC}"
    echo
    echo -e "${GREEN}✅ Server is ready for production deployment!${NC}"
    echo
}

# Main setup function
main() {
    local force=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -r|--repo)
                REPO_URL="$2"
                shift 2
                ;;
            -d|--domain)
                DOMAIN_NAME="$2"
                shift 2
                ;;
            -u|--user)
                APP_USER="$2"
                shift 2
                ;;
            -p|--path)
                APP_DIR="$2"
                shift 2
                ;;
            -f|--force)
                force=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate required parameters
    if [[ -z "$REPO_URL" ]]; then
        log_error "Repository URL is required"
        show_usage
        exit 1
    fi
    
    echo -e "${PURPLE}🚀 Setting up Ubuntu server for $PROJECT_NAME${NC}"
    echo -e "${PURPLE}============================================${NC}"
    echo
    
    # Confirmation
    if [[ "$force" != true ]]; then
        log_warning "This will configure the Ubuntu server for production deployment."
        log_warning "The following will be installed/configured:"
        echo -e "  • System packages and updates"
        echo -e "  • Docker and Docker Compose"
        echo -e "  • Firewall (UFW) and fail2ban"
        echo -e "  • Application user: $APP_USER"
        echo -e "  • Application directory: $APP_DIR"
        echo -e "  • Repository: $REPO_URL"
        if [[ -n "$DOMAIN_NAME" ]]; then
            echo -e "  • Domain: $DOMAIN_NAME"
        fi
        echo
        read -p "Continue with setup? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Setup cancelled"
            exit 0
        fi
    fi
    
    # Run setup steps
    check_root
    update_system
    install_docker
    configure_firewall
    configure_fail2ban
    create_app_user
    setup_app_directory
    clone_repository
    setup_environment
    setup_systemd_service
    setup_log_rotation
    setup_monitoring
    setup_backup
    initial_deployment
    
    # Show summary
    show_summary
}

# Handle script interruption
trap 'log_error "Setup interrupted"; exit 1' INT TERM

# Run main function
main "$@"
